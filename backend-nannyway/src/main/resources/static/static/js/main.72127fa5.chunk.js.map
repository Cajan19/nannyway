{"version":3,"sources":["context/user/UserContext.js","utils/jwt-utils.js","context/user/UserContextProvider.js","pages/PrivateRoute.js","pages/ChildInCareOverview.js","utils/auth-utils.js","pages/LoginPage.js","App.js","serviceWorker.js","index.js"],"names":["UserStateContext","createContext","UserDispatchContext","jwtDecode","require","key","getJWTToken","localStorage","getItem","getDecodedJWTToken","jwtToken","decodedToken","console","log","initialState","authStatus","undefined","reducer","state","action","type","userData","payload","UserContextProvider","children","useReducer","dispatch","Provider","value","PrivateRoute","Component","component","rest","useContext","useEffect","Date","getTime","exp","removeItem","render","props","to","ChildInCareOverview","username","password","a","fetch","method","headers","body","JSON","stringify","response","text","LoginPage","useState","setUsername","setPassword","TextField","label","onChange","event","target","Button","onClick","performLogin","then","data","token","setItem","catch","Navigation","isJWTTokenValid","path","exact","App","className","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.72127fa5.chunk.js","sourcesContent":["import {createContext} from \"react\";\n\nexport const UserStateContext = createContext({});\nexport const UserDispatchContext = createContext({});","const jwtDecode = require('jwt-decode');\n\nconst key = \"nannyway-user-token\";\n\nexport function getJWTToken() {\n    return localStorage.getItem(key);\n}\n\nexport function removeJWTToken() {\n    return localStorage.removeItem(key);\n}\n\nexport function setJWTToken(token) {\n    return localStorage.setItem(key, token);\n}\n\nexport function isJWTTokenValid() {\n    const jwtToken = getJWTToken();\n    if(!jwtToken){\n        return false;\n    }\n    const decodedToken = getDecodedJWTToken();\n    return  (new Date().getTime() / 1000) < decodedToken.exp;\n}\n\nexport function getDecodedJWTToken() {\n    const jwtToken = getJWTToken();\n    const decodedToken = jwtDecode(jwtToken);\n    console.log(decodedToken)\n    return decodedToken;\n}","import {UserDispatchContext, UserStateContext} from \"./UserContext\";\nimport React, {useReducer} from \"react\";\n\nexport const LOGIN = \"LOGIN\"\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\"\nexport const LOGIN_FAILED = \"LOGIN_FAILED\"\n\nexport const LOGOUT = \"LOGOUT\"\nconst initialState = {\n    authStatus: undefined\n};\n\nfunction reducer(state, action) {\n    switch (action.type) {\n        case LOGIN:\n            return {...state, authStatus: 'PENDING'};\n        case LOGIN_SUCCESS:\n            return {...state, authStatus: 'SUCCESS', userData: action.payload};\n        case LOGIN_FAILED:\n            return {...state, authStatus: 'FAILED'};\n        case LOGOUT:\n            return {...initialState};\n        default:\n            return state;\n    }\n}\n\nexport default function UserContextProvider({children}) {\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    return <UserStateContext.Provider value={state}>\n        <UserDispatchContext.Provider value={dispatch}>\n            {children}\n        </UserDispatchContext.Provider>\n    </UserStateContext.Provider>\n}\n\n","import React, {useContext, useEffect} from \"react\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport {UserDispatchContext, UserStateContext} from \"../context/user/UserContext\";\nimport {LOGOUT} from \"../context/user/UserContextProvider\";\nimport {removeJWTToken} from \"../utils/jwt-utils\";\n\nexport default function PrivateRoute({component: Component, ...rest}) {\n    const {authStatus, userData} = useContext(UserStateContext);\n    const dispatch = useContext(UserDispatchContext);\n    useEffect(() => {\n        if(authStatus === 'SUCCESS' && (new Date().getTime() / 1000) >= userData.exp){\n            removeJWTToken();\n            dispatch({type: LOGOUT});\n        }\n    })\n\n    return <Route {...rest} render={\n        (props) => {\n            if (authStatus !== 'SUCCESS') {\n                return <Redirect to={\"/login\"}/>\n            }\n\n            if ((new Date().getTime() / 1000) >= userData.exp) {\n                return <Redirect to={\"/login\"}/>\n            }\n\n            return <Component {...props}/>\n        }\n    }/>\n}\n\n","import React from \"react\";\n\nexport default function ChildInCareOverview() {\n    return (\n        <div>\n            Child in Care Overview\n        </div>\n    )\n\n}","export async function performLogin(username, password) {\n    const response = await fetch(\"/auth/login\", {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({username, password})\n    });\n    return await response.text()\n}","import React, {useContext, useState} from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport {performLogin} from \"../utils/auth-utils\";\nimport {getDecodedJWTToken, setJWTToken} from \"../utils/jwt-utils\";\nimport {LOGIN, LOGIN_FAILED, LOGIN_SUCCESS} from \"../context/user/UserContextProvider\";\nimport {UserDispatchContext} from \"../context/user/UserContext\";\n\nexport default function LoginPage() {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const dispatch = useContext(UserDispatchContext);\n\n    function login() {\n        dispatch({type: LOGIN})\n        performLogin(username, password)\n            .then(data => {\n                setJWTToken(data);\n                const userData = getDecodedJWTToken();\n                dispatch({type: LOGIN_SUCCESS, payload: userData})\n            }).catch(() => {\n            dispatch({type: LOGIN_FAILED})\n        })\n    }\n\n    return <div>\n        <div>\n            <TextField label=\"Username\" type=\"text\" value={username}\n                       onChange={(event) => setUsername(event.target.value)}/>\n        </div>\n        <div>\n            <TextField label=\"Password\" type=\"password\" value={password}\n                       onChange={(event) => setPassword(event.target.value)}/>\n        </div>\n        <Button onClick={login}>Login</Button>\n    </div>\n}","import React, {useContext, useEffect} from \"react\";\nimport {UserDispatchContext} from \"./context/user/UserContext\";\nimport {getDecodedJWTToken, isJWTTokenValid} from \"./utils/jwt-utils\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Route, Switch} from \"react-router\";\nimport PrivateRoute from \"./pages/PrivateRoute\";\nimport ChildInCareOverview from \"./pages/ChildInCareOverview\";\nimport LoginPage from \"./pages/LoginPage\";\nimport UserContextProvider, {LOGIN_SUCCESS} from \"./context/user/UserContextProvider\";\n\n\nfunction Navigation() {\n    const dispatch = useContext(UserDispatchContext);\n\n    useEffect(() => {\n        if (isJWTTokenValid()) {\n            dispatch({type: LOGIN_SUCCESS, payload: getDecodedJWTToken()})\n        }\n    }, [dispatch])\n\n    return <BrowserRouter>\n        <Switch>\n            <PrivateRoute path=\"/\" component={ChildInCareOverview} exact/>\n            <Route path=\"/login\" exact>\n                <LoginPage/>\n            </Route>\n        </Switch>\n    </BrowserRouter>;\n}\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <UserContextProvider>\n                <Navigation/>\n            </UserContextProvider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}